const nodemailer = require('nodemailer');

// C·∫•u h√¨nh email transporter
const createTransporter = () => {
  // S·ª≠ d·ª•ng Gmail SMTP (c√≥ th·ªÉ thay ƒë·ªïi theo provider kh√°c)
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER || 'cybernblack@gmail.com', // Thay ƒë·ªïi trong .env
      pass: process.env.EMAIL_PASS || 'qyes bqek ferq dsqm' // App password, kh√¥ng ph·∫£i m·∫≠t kh·∫©u th∆∞·ªùng
    }
  });
};

// G·ª≠i OTP qua email
const sendOtpEmail = async (email, otp, type = 'change_password') => {
  try {
    const transporter = createTransporter();
    
    let subject = '';
    let htmlContent = '';
    
    switch (type) {
      case 'change_password':
        subject = 'üîê M√£ OTP x√°c th·ª±c ƒë·ªïi m·∫≠t kh·∫©u - B·ªánh vi·ªán Demo';
        htmlContent = `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; text-align: center;">
              <h1 style="color: white; margin: 0;">üè• B·ªánh vi·ªán Demo</h1>
            </div>
            
            <div style="padding: 30px; background: #f8f9fa;">
              <h2 style="color: #333; margin-bottom: 20px;">X√°c th·ª±c ƒë·ªïi m·∫≠t kh·∫©u</h2>
              
              <p style="font-size: 16px; color: #555; line-height: 1.6;">
                Xin ch√†o,<br><br>
                B·∫°n ƒë√£ y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u t√†i kho·∫£n. Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c:
              </p>
              
              <div style="text-align: center; margin: 30px 0;">
                <div style="background: #007bff; color: white; font-size: 32px; font-weight: bold; 
                            padding: 20px; border-radius: 10px; letter-spacing: 8px; display: inline-block;">
                  ${otp}
                </div>
              </div>
              
              <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <p style="margin: 0; color: #856404;">
                  <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong><br>
                  ‚Ä¢ M√£ OTP n√†y c√≥ hi·ªáu l·ª±c trong <strong>3 ph√∫t</strong><br>
                  ‚Ä¢ Ch·ªâ s·ª≠ d·ª•ng 1 l·∫ßn duy nh·∫•t<br>
                  ‚Ä¢ Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai
                </p>
              </div>
              
              <p style="font-size: 14px; color: #666; margin-top: 30px;">
                N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£.
              </p>
            </div>
            
            <div style="background: #343a40; color: white; padding: 20px; text-align: center;">
              <p style="margin: 0; font-size: 14px;">
                ¬© 2025 B·ªánh vi·ªán Demo - H·ªá th·ªëng qu·∫£n l√Ω kh√°m ch·ªØa b·ªánh
              </p>
            </div>
          </div>
        `;
        break;
      
      case 'forgot_password':
        subject = 'üîë M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u - B·ªánh vi·ªán Demo';
        htmlContent = `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <!-- Similar structure for forgot password -->
            <h2>Kh√¥i ph·ª•c m·∫≠t kh·∫©u</h2>
            <p>M√£ OTP c·ªßa b·∫°n l√†: <strong style="font-size: 24px; color: #dc3545;">${otp}</strong></p>
            <p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong 3 ph√∫t.</p>
          </div>
        `;
        break;
        
      default:
        subject = 'üîê M√£ OTP x√°c th·ª±c - B·ªánh vi·ªán Demo';
        htmlContent = `
          <h2>M√£ OTP x√°c th·ª±c</h2>
          <p>M√£ OTP c·ªßa b·∫°n l√†: <strong style="font-size: 24px;">${otp}</strong></p>
          <p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong 3 ph√∫t.</p>
        `;
    }
    
    const mailOptions = {
      from: {
        name: 'B·ªánh vi·ªán Demo',
        address: process.env.EMAIL_USER || 'your-email@gmail.com'
      },
      to: email,
      subject: subject,
      html: htmlContent
    };
    
    const info = await transporter.sendMail(mailOptions);
    console.log('OTP email sent successfully:', info.messageId);
    return { success: true, messageId: info.messageId };
    
  } catch (error) {
    console.error('Error sending OTP email:', error);
    return { success: false, error: error.message };
  }
};

// Test email connection
const testEmailConnection = async () => {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('‚úÖ Email service is ready');
    return true;
  } catch (error) {
    console.error('‚ùå Email service error:', error.message);
    return false;
  }
};

module.exports = {
  sendOtpEmail,
  testEmailConnection
};